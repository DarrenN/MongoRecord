h1. MongoRecord - PHP 5.3 Namespaced & Autoloaded Version

MongoRecord is a PHP Mongo ORM layer built on top of the PHP "Mongo PECL extension":http://pecl.php.net/package/mongo 

MongoRecord is an extraction from online classifieds site "Oodle":http://www.oodle.com. Oodle's requirements for a manageable, easy to understand interface for dealing with the super-scalable Mongo datastore was the primary reason for MongoRecord. It was developed to use with PHP applications looking to add Mongo's scaling capabilities while dealing with a nice abstraction layer.

h2. Additions to Original:

# Using Autoloader instead of require
# Using PHP 5.3 Namespaces based on the PHP Standard Working Group Cabal - http://groups.google.com/group/php-standards/web/psr-0-final-proposal
# Models broken out into own directory, but this is optional

h2. To-dos:

* Write proper unit tests
* Document code better
* Write more examples

h2. Features

* Collection names by convention
* Attributes by convention
* Validations
* Callbacks
* Sorting, offsets, limits

h2. Requirements

* PHP 5.3+
* Mongo PECL

h2. Installation

Extract the source files into a directory in your PHP library path. Use SplClassAutloader.php to load classes using their namespaces:

pre.. 
$libDir = __DIR__ . '/lib';
$modelDir = __DIR__;
//require $libDir . '/MongoRecord/BaseMongoRecord.php';

require $libDir . '/SplClassLoader.php';

use MongoRecord\BaseMongoRecord,
    Models;

$classLoader = new SplClassLoader('MongoRecord', $libDir);
$classLoader->register();

$classLoader = new SplClassLoader('Models', $modelDir);
$classLoader->register();

p. 

h2. Usage

h3. Basic

Using MongoRecord is as simple as declaring classes that are extensions of the base ORM class. Models are currently in the @Models@ directory but this can be changed accordingly in the autoloader.

pre.. 
namespace Models;

class Person extends \MongoRecord\BaseMongoRecord
{
}

// initialize connection and database name
BaseMongoRecord::$connection = new Mongo();
BaseMongoRecord::$database = 'myapp';

p. 
This gives @Person@ basic CRUD methods: @save()@, @destroy()@, @findOne()@, and @find()@.

Every class automatically gets mapped to a Mongo collection by convention.

E.g.
@Person@ -> @people@
@MyClass@ -> @my_classes@

h3. Creating and Fetching

New records can be created by instantiating and saving:

pre.. 
$person = new Models\Person();
$person->save(); // true or false depending on success

$person = Models\Person::findOne();
$person->destroy();

p. 
You can also add options to how you want to find.

pre.. 
// find the first Person sorted by name, starting from the tenth
Models\Person::find(array(), array('sort' => array('name' => 1), 'offset' => 10, 'limit' => 1));

h3. Attributes

Attributes can be set in bulk on the constructor, one-by-one, or chained.

pre.. 
$person = new Models\Person(array('name' => 'Bob', 'description' => 'foobar'));
$person->setAge(25)->setGender("Male");
$person->save(); // returns true or false

Models\Person::find(array('name' => 'Bob', 'gender' => 'Male')); // finds all male Bobs in the people collection.

h3. Validations

Validations can be added based on the name of the attribute

pre.. 

class Person extends \MongoRecord\BaseMongoRecord
{
    public function validatesName($name)
    {
        if ($name == 'Bob')
            return false;
        else
            return true;
    }
}

$person = new Models\Person();
$person->setName("Bob");
$person->save(); // fails!

h3. Callbacks

Callbacks can be added for the following events:

* beforeSave()
* afterSave()
* beforeValidation()
* afterValidation()
* beforeDestroy()
* afterNew()

In a new, save, destroy cycle, the validations are called in the following order:

@afterNew -> beforeValidation -> afterValidation -> beforeSave -> afterSave -> beforeDestroy@

pre.. 
class Person extends \MongoRecord\BaseMongoRecord
{
    public function beforeSave()
    {
         if ($this->getName() == 'Bob')
             $this->setName('Bill');
    }
}

p.
